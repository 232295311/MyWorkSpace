<!--
 * @Description: 
 * @Author: Tulandbla
 * @GitHubUserName: 232295311@qq.com
-->
【Tuland】经典75题_找出两数组的不同_双指针
【Tuland】代码随想录_哈希表_移除链表元素_虚拟头结点&递归

> Problem: [1071. 字符串的最大公因子](https://leetcode.cn/problems/greatest-common-divisor-of-strings/description/)

[TOC]


# 思路
  //水槽的面积由两个因素组成，当长度线性减少的时候，只考虑高度因素就可。两端的高度是由最短板影响，所以当不断寻找最大最短板的时候就能遍历找到最大面积
  let i = 0;
  let j = height.length - 1;
  //移动左右两个板板，每次都只移动最小的那个板，这样会出现几个情况：
  //1、移动的板和新的板比较，变短或者不变，那面积肯定变小了
  //2、移动的板和新的板比较，变长了，那面积可能变大

  //移动左右两个板板，每次都只移动最大的板，这样会出现：
  //1、移动的板和新的板比较，无论变长变短，面积都只可能变小。
  let max = 0;
  while (i < j) {
    const area = Math.min(height[i], height[j]) * (j - i);
    max = Math.max(max, area);
    if (height[i] < height[j]) {
      i++;
    } else {
      j--;
    }
  }
  return max;



# 解题方法

- 如注释

# 复杂度

时间复杂度: $O(n)$

# Code
```TypeScript []
function gcdOfStrings(str1: string, str2: string): string {
  //要求返回一个新字符串res，且res能被str1和str2整除
  // 容易联想到欧几里得算法（辗转相除法）：
  // ①欧几里得算法：用于计算两个非负整数a，b的最大公约数。
  // ②计算公式gcd(a,b) = gcd(b,a mod b)。
  // ③两个整数a,b的最大公约数：指能够同时被a,b整除的最大的正整数。
  // 所以这道题就转换为求str1和str2的“最大公约字符串”

  if (str1 + str2 !== str2 + str1) {
    //如果互相首尾相拼的字符串不相等，说明str1和str2之间不存在某个子字符串循环
    //则无解
    return "";
  }
  const m = str1.length;
  const n = str2.length;
  function gcd(a, b) {
    //欧几里得算法的实现 如a=10,b=6最终得到res=2
    if (a % b === 0) {
      return b;
    }
    return gcd(b, a % b);
  }
  return str1.substring(0, gcd(m, n));
}
```
  
